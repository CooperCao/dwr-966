Index: miniupnpc-1.6.20120509/getifaddr.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ miniupnpc-1.6.20120509/getifaddr.c	2014-05-15 13:30:32.000000000 +0530
@@ -0,0 +1,144 @@
+/* $Id: getifaddr.c,v 1.11 2011/05/15 08:59:27 nanard Exp $ */
+/* MiniUPnP project
+ * http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
+ * (c) 2006-2011 Thomas Bernard 
+ * This software is subject to the conditions detailed
+ * in the LICENCE file provided within the distribution */
+
+#include <stdio.h>
+#include <string.h>
+#include <syslog.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <arpa/inet.h>
+#include <netinet/in.h>
+#if defined(sun)
+#include <sys/sockio.h>
+#endif
+
+#define USE_GETIFADDRS
+
+#include "getifaddr.h"
+#if defined(USE_GETIFADDRS) || defined(ENABLE_IPV6)
+#include <ifaddrs.h>
+#endif
+
+int
+getifaddr(const char * ifname, char * buf, int len)
+{
+#ifndef USE_GETIFADDRS
+	/* use ioctl SIOCGIFADDR. Works only for ip v4 */
+	/* SIOCGIFADDR struct ifreq *  */
+	int s;
+	struct ifreq ifr;
+	int ifrlen;
+	struct sockaddr_in * addr;
+	ifrlen = sizeof(ifr);
+
+	if(!ifname || ifname[0]=='\0')
+		return -1;
+	s = socket(PF_INET, SOCK_DGRAM, 0);
+	if(s < 0)
+	{
+		syslog(LOG_ERR, "socket(PF_INET, SOCK_DGRAM): %m");
+		return -1;
+	}
+	strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+	if(ioctl(s, SIOCGIFADDR, &ifr, &ifrlen) < 0)
+	{
+		syslog(LOG_ERR, "ioctl(s, SIOCGIFADDR, ...): %m");
+		close(s);
+		return -1;
+	}
+	addr = (struct sockaddr_in *)&ifr.ifr_addr;
+	if(!inet_ntop(AF_INET, &addr->sin_addr, buf, len))
+	{
+		syslog(LOG_ERR, "inet_ntop(): %m");
+		close(s);
+		return -1;
+	}
+	close(s);
+#else /* ifndef USE_GETIFADDRS */
+	/* Works for all address families (both ip v4 and ip v6) */
+	struct ifaddrs * ifap;
+	struct ifaddrs * ife;
+
+	if(!ifname || ifname[0]=='\0')
+		return -1;
+	if(getifaddrs(&ifap)<0)
+	{
+		syslog(LOG_ERR, "getifaddrs: %m");
+		return -1;
+	}
+	for(ife = ifap; ife; ife = ife->ifa_next)
+	{
+		/* skip other interfaces */
+		if(0 != strcmp(ifname, ife->ifa_name))
+			continue;
+		switch(ife->ifa_addr->sa_family)
+		{
+		case AF_INET:
+			inet_ntop(ife->ifa_addr->sa_family,
+			          &((struct sockaddr_in *)ife->ifa_addr)->sin_addr,
+			          buf, len);
+			break;
+/*
+		case AF_INET6:
+			inet_ntop(ife->ifa_addr->sa_family,
+			          &((struct sockaddr_in6 *)ife->ifa_addr)->sin6_addr,
+			          buf, len);
+*/
+		}
+	}
+	freeifaddrs(ifap);
+#endif
+	return 0;
+}
+
+#ifdef ENABLE_IPV6
+int
+find_ipv6_addr(const char * ifname,
+               char * dst, int n)
+{
+	struct ifaddrs * ifap;
+	struct ifaddrs * ife;
+	const struct sockaddr_in6 * addr;
+	char buf[64];
+	int r = 0;
+
+	if(!dst)
+		return -1;
+
+	if(getifaddrs(&ifap)<0)
+	{
+		syslog(LOG_ERR, "getifaddrs: %m");
+		return -1;
+	}
+	for(ife = ifap; ife; ife = ife->ifa_next)
+	{
+		/* skip other interfaces if one was specified */
+		if(ifname && (0 != strcmp(ifname, ife->ifa_name)))
+			continue;
+		if(ife->ifa_addr->sa_family == AF_INET6)
+		{
+			addr = (const struct sockaddr_in6 *)ife->ifa_addr;
+			if(!IN6_IS_ADDR_LOOPBACK(&addr->sin6_addr)
+			   && !IN6_IS_ADDR_LINKLOCAL(&addr->sin6_addr))
+			{
+				inet_ntop(ife->ifa_addr->sa_family,
+				          &addr->sin6_addr,
+				          buf, sizeof(buf));
+				/* add brackets */
+				snprintf(dst, n, "[%s]", buf);
+				r = 1;
+			}
+		}
+	}
+	return r;
+}
+#endif
+
+
Index: miniupnpc-1.6.20120509/getifaddr.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ miniupnpc-1.6.20120509/getifaddr.h	2014-05-15 13:30:44.000000000 +0530
@@ -0,0 +1,26 @@
+/* $Id: getifaddr.h,v 1.5 2011/05/15 08:59:27 nanard Exp $ */
+/* MiniUPnP project
+ * http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
+ * (c) 2006-2011 Thomas Bernard 
+ * This software is subject to the conditions detailed
+ * in the LICENCE file provided within the distribution */
+
+#ifndef __GETIFADDR_H__
+#define __GETIFADDR_H__
+
+/* getifaddr()
+ * take a network interface name and write the
+ * ip v4 address as text in the buffer
+ * returns: 0 success, -1 failure */
+int
+getifaddr(const char * ifname, char * buf, int len);
+
+/* find a non link local IP v6 address for the interface.
+ * if ifname is NULL, look for all interfaces */
+int
+find_ipv6_addr(const char * ifname,
+               char * dst, int n);
+
+#endif
+
+
Index: miniupnpc-1.6.20120509/miniupnpcstrings.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ miniupnpc-1.6.20120509/miniupnpcstrings.h	2014-05-15 13:31:11.000000000 +0530
@@ -0,0 +1,16 @@
+/* $Id: miniupnpcstrings.h.in,v 1.4 2011/01/04 11:41:53 nanard Exp $ */
+/* Project: miniupnp
+ * http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
+ * Author: Thomas Bernard
+ * Copyright (c) 2005-2011 Thomas Bernard
+ * This software is subjects to the conditions detailed
+ * in the LICENCE file provided within this distribution */
+#ifndef __MINIUPNPCSTRINGS_H__
+#define __MINIUPNPCSTRINGS_H__
+
+#define OS_STRING "Linux/2.6.33.3-85.fc13.i686.PAE"
+#define MINIUPNPC_VERSION_STRING "1.6"
+
+#endif
+
+
